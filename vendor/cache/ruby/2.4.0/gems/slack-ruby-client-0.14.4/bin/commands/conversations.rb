# This file was auto-generated by lib/tasks/web.rake

desc 'Conversations methods.'
command 'conversations' do |g|
  g.desc 'This method archives a conversation. Not all types of conversations can be archived.'
  g.long_desc %( This method archives a conversation. Not all types of conversations can be archived. )
  g.command 'archive' do |c|
    c.flag 'channel', desc: 'ID of conversation to archive.'
    c.action do |_global_options, options, _args|
      puts JSON.dump($client.conversations_archive(options))
    end
  end

  g.desc 'This Conversations API method closes direct messages, multi-person or 1:1 or otherwise.'
  g.long_desc %( This Conversations API method closes direct messages, multi-person or 1:1 or otherwise. )
  g.command 'close' do |c|
    c.flag 'channel', desc: 'Conversation to close.'
    c.action do |_global_options, options, _args|
      puts JSON.dump($client.conversations_close(options))
    end
  end

  g.desc 'Create a public or private channel using this Conversations API method.'
  g.long_desc %( Create a public or private channel using this Conversations API method. )
  g.command 'create' do |c|
    c.flag 'name', desc: 'Name of the public or private channel to create.'
    c.flag 'is_private', desc: 'Create a private channel instead of a public one.'
    c.flag 'user_ids', desc: 'Required for workspace apps. A list of between 1 and 30 human users that will be added to the newly-created conversation. This argument has no effect when used by classic Slack apps.'
    c.action do |_global_options, options, _args|
      puts JSON.dump($client.conversations_create(options))
    end
  end

  g.desc 'This method returns a portion of message events from the specified conversation.'
  g.long_desc %( This method returns a portion of message events from the specified conversation. )
  g.command 'history' do |c|
    c.flag 'channel', desc: 'Conversation ID to fetch history for.'
    c.flag 'cursor', desc: "Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a previous request's response_metadata. Default value fetches the first 'page' of the collection. See pagination for more detail."
    c.flag 'inclusive', desc: 'Include messages with latest or oldest timestamp in results only when either timestamp is specified.'
    c.flag 'latest', desc: 'End of time range of messages to include in results.'
    c.flag 'limit', desc: "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached."
    c.flag 'oldest', desc: 'Start of time range of messages to include in results.'
    c.action do |_global_options, options, _args|
      puts JSON.dump($client.conversations_history(options))
    end
  end

  g.desc 'This Conversations API method returns information about a workspace conversation.'
  g.long_desc %( This Conversations API method returns information about a workspace conversation. )
  g.command 'info' do |c|
    c.flag 'channel', desc: 'Conversation ID to learn more about.'
    c.flag 'include_locale', desc: 'Set this to true to receive the locale for this conversation. Defaults to false.'
    c.flag 'include_num_members', desc: 'Set to true to include the member count for the specified conversation. Defaults to false.'
    c.action do |_global_options, options, _args|
      puts JSON.dump($client.conversations_info(options))
    end
  end

  g.desc 'This Conversations API method invites 1-30 users to a public or private channel. The calling user must be a member of the channel.'
  g.long_desc %( This Conversations API method invites 1-30 users to a public or private channel. The calling user must be a member of the channel. )
  g.command 'invite' do |c|
    c.flag 'channel', desc: 'The ID of the public or private channel to invite user(s) to.'
    c.flag 'users', desc: 'A comma separated list of user IDs. Up to 30 users may be listed.'
    c.action do |_global_options, options, _args|
      puts JSON.dump($client.conversations_invite(options))
    end
  end

  g.desc 'This Conversations API method joins a user to an existing conversation.'
  g.long_desc %( This Conversations API method joins a user to an existing conversation. )
  g.command 'join' do |c|
    c.flag 'channel', desc: 'ID of conversation to join.'
    c.action do |_global_options, options, _args|
      puts JSON.dump($client.conversations_join(options))
    end
  end

  g.desc 'This Conversations API method allows a user to remove another member from a channel.'
  g.long_desc %( This Conversations API method allows a user to remove another member from a channel. )
  g.command 'kick' do |c|
    c.flag 'channel', desc: 'ID of conversation to remove user from.'
    c.flag 'user', desc: 'User ID to be removed.'
    c.action do |_global_options, options, _args|
      puts JSON.dump($client.conversations_kick(options))
    end
  end

  g.desc 'This Conversations API method makes like a tree and leaves a conversation.'
  g.long_desc %( This Conversations API method makes like a tree and leaves a conversation. )
  g.command 'leave' do |c|
    c.flag 'channel', desc: 'Conversation to leave.'
    c.action do |_global_options, options, _args|
      puts JSON.dump($client.conversations_leave(options))
    end
  end

  g.desc 'This Conversations API method returns a list of all channel-like conversations in a workspace. The "channels" returned depend on what the calling token has access to and the directives placed in the types parameter.'
  g.long_desc %( This Conversations API method returns a list of all channel-like conversations in a workspace. The "channels" returned depend on what the calling token has access to and the directives placed in the types parameter. )
  g.command 'list' do |c|
    c.flag 'cursor', desc: "Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a previous request's response_metadata. Default value fetches the first 'page' of the collection. See pagination for more detail."
    c.flag 'exclude_archived', desc: 'Set to true to exclude archived channels from the list.'
    c.flag 'limit', desc: "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. Must be an integer no larger than 1000."
    c.flag 'types', desc: 'Mix and match channel types by providing a comma-separated list of any combination of public_channel, private_channel, mpim, im.'
    c.action do |_global_options, options, _args|
      puts JSON.dump($client.conversations_list(options))
    end
  end

  g.desc 'This Conversations API method returns a paginated list of members party to a conversation.'
  g.long_desc %( This Conversations API method returns a paginated list of members party to a conversation. )
  g.command 'members' do |c|
    c.flag 'channel', desc: 'ID of the conversation to retrieve members for.'
    c.flag 'cursor', desc: "Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a previous request's response_metadata. Default value fetches the first 'page' of the collection. See pagination for more detail."
    c.flag 'limit', desc: "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached."
    c.action do |_global_options, options, _args|
      puts JSON.dump($client.conversations_members(options))
    end
  end

  g.desc 'This Conversations API method opens a multi-person direct message or just a 1:1 direct message.'
  g.long_desc %( This Conversations API method opens a multi-person direct message or just a 1:1 direct message. )
  g.command 'open' do |c|
    c.flag 'channel', desc: "Resume a conversation by supplying an im or mpim's ID. Or provide the users field instead."
    c.flag 'return_im', desc: 'Boolean, indicates you want the full IM channel definition in the response.'
    c.flag 'users', desc: 'Comma separated lists of users. If only one user is included, this creates a 1:1 DM.  The ordering of the users is preserved whenever a multi-person direct message is returned. Supply a channel when not supplying users.'
    c.action do |_global_options, options, _args|
      puts JSON.dump($client.conversations_open(options))
    end
  end

  g.desc 'This method renames a conversation. Some types of conversations cannot be renamed.'
  g.long_desc %( This method renames a conversation. Some types of conversations cannot be renamed. )
  g.command 'rename' do |c|
    c.flag 'channel', desc: 'ID of conversation to rename.'
    c.flag 'name', desc: 'New name for conversation.'
    c.action do |_global_options, options, _args|
      puts JSON.dump($client.conversations_rename(options))
    end
  end

  g.desc 'This Conversations API method returns an entire thread (a message plus all the messages in reply to it), while conversations.history method returns only parent messages.'
  g.long_desc %( This Conversations API method returns an entire thread (a message plus all the messages in reply to it), while conversations.history method returns only parent messages. )
  g.command 'replies' do |c|
    c.flag 'channel', desc: 'Conversation ID to fetch thread from.'
    c.flag 'ts', desc: "Unique identifier of a thread's parent message."
    c.flag 'cursor', desc: "Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a previous request's response_metadata. Default value fetches the first 'page' of the collection. See pagination for more detail."
    c.flag 'inclusive', desc: 'Include messages with latest or oldest timestamp in results only when either timestamp is specified.'
    c.flag 'latest', desc: 'End of time range of messages to include in results.'
    c.flag 'limit', desc: "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached."
    c.flag 'oldest', desc: 'Start of time range of messages to include in results.'
    c.action do |_global_options, options, _args|
      puts JSON.dump($client.conversations_replies(options))
    end
  end

  g.desc 'This method is used to change the purpose of a conversation. The calling user must be a member of the conversation. Not all conversation types may have a purpose set.'
  g.long_desc %( This method is used to change the purpose of a conversation. The calling user must be a member of the conversation. Not all conversation types may have a purpose set. )
  g.command 'setPurpose' do |c|
    c.flag 'channel', desc: 'Conversation to set the purpose of.'
    c.flag 'purpose', desc: 'A new, specialer purpose.'
    c.action do |_global_options, options, _args|
      puts JSON.dump($client.conversations_setPurpose(options))
    end
  end

  g.desc 'This method is used to change the topic of a conversation. The calling user must be a member of the conversation. Not all conversation types support a new topic.'
  g.long_desc %( This method is used to change the topic of a conversation. The calling user must be a member of the conversation. Not all conversation types support a new topic. )
  g.command 'setTopic' do |c|
    c.flag 'channel', desc: 'Conversation to set the topic of.'
    c.flag 'topic', desc: 'The new topic string. Does not support formatting or linkification.'
    c.action do |_global_options, options, _args|
      puts JSON.dump($client.conversations_setTopic(options))
    end
  end

  g.desc 'This method unarchives a conversation. The calling user is added to the conversation.'
  g.long_desc %( This method unarchives a conversation. The calling user is added to the conversation. )
  g.command 'unarchive' do |c|
    c.flag 'channel', desc: 'ID of conversation to unarchive.'
    c.action do |_global_options, options, _args|
      puts JSON.dump($client.conversations_unarchive(options))
    end
  end
end
