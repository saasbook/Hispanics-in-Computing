# This file was auto-generated by lib/tasks/web.rake

module Slack
  module Web
    module Api
      module Endpoints
        module Conversations
          #
          # This method archives a conversation. Not all types of conversations can be archived.
          #
          # @option options [channel] :channel
          #   ID of conversation to archive.
          # @see https://api.slack.com/methods/conversations.archive
          # @see https://github.com/slack-ruby/slack-api-ref/blob/master/methods/conversations/conversations.archive.json
          def conversations_archive(options = {})
            throw ArgumentError.new('Required arguments :channel missing') if options[:channel].nil?
            options = options.merge(channel: channels_id(options)['channel']['id']) if options[:channel]
            post('conversations.archive', options)
          end

          #
          # This Conversations API method closes direct messages, multi-person or 1:1 or otherwise.
          #
          # @option options [channel] :channel
          #   Conversation to close.
          # @see https://api.slack.com/methods/conversations.close
          # @see https://github.com/slack-ruby/slack-api-ref/blob/master/methods/conversations/conversations.close.json
          def conversations_close(options = {})
            throw ArgumentError.new('Required arguments :channel missing') if options[:channel].nil?
            options = options.merge(channel: channels_id(options)['channel']['id']) if options[:channel]
            post('conversations.close', options)
          end

          #
          # Create a public or private channel using this Conversations API method.
          #
          # @option options [Object] :name
          #   Name of the public or private channel to create.
          # @option options [Object] :is_private
          #   Create a private channel instead of a public one.
          # @option options [Object] :user_ids
          #   Required for workspace apps. A list of between 1 and 30 human users that will be added to the newly-created conversation. This argument has no effect when used by classic Slack apps.
          # @see https://api.slack.com/methods/conversations.create
          # @see https://github.com/slack-ruby/slack-api-ref/blob/master/methods/conversations/conversations.create.json
          def conversations_create(options = {})
            throw ArgumentError.new('Required arguments :name missing') if options[:name].nil?
            post('conversations.create', options)
          end

          #
          # This method returns a portion of message events from the specified conversation.
          #
          # @option options [channel] :channel
          #   Conversation ID to fetch history for.
          # @option options [Object] :cursor
          #   Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a previous request's response_metadata. Default value fetches the first "page" of the collection. See pagination for more detail.
          # @option options [Object] :inclusive
          #   Include messages with latest or oldest timestamp in results only when either timestamp is specified.
          # @option options [timestamp] :latest
          #   End of time range of messages to include in results.
          # @option options [Object] :limit
          #   The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.
          # @option options [timestamp] :oldest
          #   Start of time range of messages to include in results.
          # @see https://api.slack.com/methods/conversations.history
          # @see https://github.com/slack-ruby/slack-api-ref/blob/master/methods/conversations/conversations.history.json
          def conversations_history(options = {})
            throw ArgumentError.new('Required arguments :channel missing') if options[:channel].nil?
            options = options.merge(channel: channels_id(options)['channel']['id']) if options[:channel]
            if block_given?
              Pagination::Cursor.new(self, :conversations_history, options).each do |page|
                yield page
              end
            else
              post('conversations.history', options)
            end
          end

          #
          # This Conversations API method returns information about a workspace conversation.
          #
          # @option options [channel] :channel
          #   Conversation ID to learn more about.
          # @option options [Object] :include_locale
          #   Set this to true to receive the locale for this conversation. Defaults to false.
          # @option options [Object] :include_num_members
          #   Set to true to include the member count for the specified conversation. Defaults to false.
          # @see https://api.slack.com/methods/conversations.info
          # @see https://github.com/slack-ruby/slack-api-ref/blob/master/methods/conversations/conversations.info.json
          def conversations_info(options = {})
            throw ArgumentError.new('Required arguments :channel missing') if options[:channel].nil?
            options = options.merge(channel: channels_id(options)['channel']['id']) if options[:channel]
            post('conversations.info', options)
          end

          #
          # This Conversations API method invites 1-30 users to a public or private channel. The calling user must be a member of the channel.
          #
          # @option options [channel] :channel
          #   The ID of the public or private channel to invite user(s) to.
          # @option options [Object] :users
          #   A comma separated list of user IDs. Up to 30 users may be listed.
          # @see https://api.slack.com/methods/conversations.invite
          # @see https://github.com/slack-ruby/slack-api-ref/blob/master/methods/conversations/conversations.invite.json
          def conversations_invite(options = {})
            throw ArgumentError.new('Required arguments :channel missing') if options[:channel].nil?
            throw ArgumentError.new('Required arguments :users missing') if options[:users].nil?
            options = options.merge(channel: channels_id(options)['channel']['id']) if options[:channel]
            post('conversations.invite', options)
          end

          #
          # This Conversations API method joins a user to an existing conversation.
          #
          # @option options [channel] :channel
          #   ID of conversation to join.
          # @see https://api.slack.com/methods/conversations.join
          # @see https://github.com/slack-ruby/slack-api-ref/blob/master/methods/conversations/conversations.join.json
          def conversations_join(options = {})
            throw ArgumentError.new('Required arguments :channel missing') if options[:channel].nil?
            options = options.merge(channel: channels_id(options)['channel']['id']) if options[:channel]
            post('conversations.join', options)
          end

          #
          # This Conversations API method allows a user to remove another member from a channel.
          #
          # @option options [channel] :channel
          #   ID of conversation to remove user from.
          # @option options [user] :user
          #   User ID to be removed.
          # @see https://api.slack.com/methods/conversations.kick
          # @see https://github.com/slack-ruby/slack-api-ref/blob/master/methods/conversations/conversations.kick.json
          def conversations_kick(options = {})
            throw ArgumentError.new('Required arguments :channel missing') if options[:channel].nil?
            throw ArgumentError.new('Required arguments :user missing') if options[:user].nil?
            options = options.merge(channel: channels_id(options)['channel']['id']) if options[:channel]
            options = options.merge(user: users_id(options)['user']['id']) if options[:user]
            post('conversations.kick', options)
          end

          #
          # This Conversations API method makes like a tree and leaves a conversation.
          #
          # @option options [channel] :channel
          #   Conversation to leave.
          # @see https://api.slack.com/methods/conversations.leave
          # @see https://github.com/slack-ruby/slack-api-ref/blob/master/methods/conversations/conversations.leave.json
          def conversations_leave(options = {})
            throw ArgumentError.new('Required arguments :channel missing') if options[:channel].nil?
            options = options.merge(channel: channels_id(options)['channel']['id']) if options[:channel]
            post('conversations.leave', options)
          end

          #
          # This Conversations API method returns a list of all channel-like conversations in a workspace. The "channels" returned depend on what the calling token has access to and the directives placed in the types parameter.
          #
          # @option options [Object] :cursor
          #   Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a previous request's response_metadata. Default value fetches the first "page" of the collection. See pagination for more detail.
          # @option options [Object] :exclude_archived
          #   Set to true to exclude archived channels from the list.
          # @option options [Object] :limit
          #   The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. Must be an integer no larger than 1000.
          # @option options [Object] :types
          #   Mix and match channel types by providing a comma-separated list of any combination of public_channel, private_channel, mpim, im.
          # @see https://api.slack.com/methods/conversations.list
          # @see https://github.com/slack-ruby/slack-api-ref/blob/master/methods/conversations/conversations.list.json
          def conversations_list(options = {})
            if block_given?
              Pagination::Cursor.new(self, :conversations_list, options).each do |page|
                yield page
              end
            else
              post('conversations.list', options)
            end
          end

          #
          # This Conversations API method returns a paginated list of members party to a conversation.
          #
          # @option options [channel] :channel
          #   ID of the conversation to retrieve members for.
          # @option options [Object] :cursor
          #   Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a previous request's response_metadata. Default value fetches the first "page" of the collection. See pagination for more detail.
          # @option options [Object] :limit
          #   The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.
          # @see https://api.slack.com/methods/conversations.members
          # @see https://github.com/slack-ruby/slack-api-ref/blob/master/methods/conversations/conversations.members.json
          def conversations_members(options = {})
            throw ArgumentError.new('Required arguments :channel missing') if options[:channel].nil?
            options = options.merge(channel: channels_id(options)['channel']['id']) if options[:channel]
            if block_given?
              Pagination::Cursor.new(self, :conversations_members, options).each do |page|
                yield page
              end
            else
              post('conversations.members', options)
            end
          end

          #
          # This Conversations API method opens a multi-person direct message or just a 1:1 direct message.
          #
          # @option options [channel] :channel
          #   Resume a conversation by supplying an im or mpim's ID. Or provide the users field instead.
          # @option options [Object] :return_im
          #   Boolean, indicates you want the full IM channel definition in the response.
          # @option options [Object] :users
          #   Comma separated lists of users. If only one user is included, this creates a 1:1 DM.  The ordering of the users is preserved whenever a multi-person direct message is returned. Supply a channel when not supplying users.
          # @see https://api.slack.com/methods/conversations.open
          # @see https://github.com/slack-ruby/slack-api-ref/blob/master/methods/conversations/conversations.open.json
          def conversations_open(options = {})
            options = options.merge(channel: channels_id(options)['channel']['id']) if options[:channel]
            post('conversations.open', options)
          end

          #
          # This method renames a conversation. Some types of conversations cannot be renamed.
          #
          # @option options [channel] :channel
          #   ID of conversation to rename.
          # @option options [Object] :name
          #   New name for conversation.
          # @see https://api.slack.com/methods/conversations.rename
          # @see https://github.com/slack-ruby/slack-api-ref/blob/master/methods/conversations/conversations.rename.json
          def conversations_rename(options = {})
            throw ArgumentError.new('Required arguments :channel missing') if options[:channel].nil?
            throw ArgumentError.new('Required arguments :name missing') if options[:name].nil?
            options = options.merge(channel: channels_id(options)['channel']['id']) if options[:channel]
            post('conversations.rename', options)
          end

          #
          # This Conversations API method returns an entire thread (a message plus all the messages in reply to it), while conversations.history method returns only parent messages.
          #
          # @option options [channel] :channel
          #   Conversation ID to fetch thread from.
          # @option options [timestamp] :ts
          #   Unique identifier of a thread's parent message.
          # @option options [Object] :cursor
          #   Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a previous request's response_metadata. Default value fetches the first "page" of the collection. See pagination for more detail.
          # @option options [Object] :inclusive
          #   Include messages with latest or oldest timestamp in results only when either timestamp is specified.
          # @option options [timestamp] :latest
          #   End of time range of messages to include in results.
          # @option options [Object] :limit
          #   The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.
          # @option options [timestamp] :oldest
          #   Start of time range of messages to include in results.
          # @see https://api.slack.com/methods/conversations.replies
          # @see https://github.com/slack-ruby/slack-api-ref/blob/master/methods/conversations/conversations.replies.json
          def conversations_replies(options = {})
            throw ArgumentError.new('Required arguments :channel missing') if options[:channel].nil?
            throw ArgumentError.new('Required arguments :ts missing') if options[:ts].nil?
            options = options.merge(channel: channels_id(options)['channel']['id']) if options[:channel]
            if block_given?
              Pagination::Cursor.new(self, :conversations_replies, options).each do |page|
                yield page
              end
            else
              post('conversations.replies', options)
            end
          end

          #
          # This method is used to change the purpose of a conversation. The calling user must be a member of the conversation. Not all conversation types may have a purpose set.
          #
          # @option options [channel] :channel
          #   Conversation to set the purpose of.
          # @option options [Object] :purpose
          #   A new, specialer purpose.
          # @see https://api.slack.com/methods/conversations.setPurpose
          # @see https://github.com/slack-ruby/slack-api-ref/blob/master/methods/conversations/conversations.setPurpose.json
          def conversations_setPurpose(options = {})
            throw ArgumentError.new('Required arguments :channel missing') if options[:channel].nil?
            throw ArgumentError.new('Required arguments :purpose missing') if options[:purpose].nil?
            options = options.merge(channel: channels_id(options)['channel']['id']) if options[:channel]
            post('conversations.setPurpose', options)
          end

          #
          # This method is used to change the topic of a conversation. The calling user must be a member of the conversation. Not all conversation types support a new topic.
          #
          # @option options [channel] :channel
          #   Conversation to set the topic of.
          # @option options [Object] :topic
          #   The new topic string. Does not support formatting or linkification.
          # @see https://api.slack.com/methods/conversations.setTopic
          # @see https://github.com/slack-ruby/slack-api-ref/blob/master/methods/conversations/conversations.setTopic.json
          def conversations_setTopic(options = {})
            throw ArgumentError.new('Required arguments :channel missing') if options[:channel].nil?
            throw ArgumentError.new('Required arguments :topic missing') if options[:topic].nil?
            options = options.merge(channel: channels_id(options)['channel']['id']) if options[:channel]
            post('conversations.setTopic', options)
          end

          #
          # This method unarchives a conversation. The calling user is added to the conversation.
          #
          # @option options [channel] :channel
          #   ID of conversation to unarchive.
          # @see https://api.slack.com/methods/conversations.unarchive
          # @see https://github.com/slack-ruby/slack-api-ref/blob/master/methods/conversations/conversations.unarchive.json
          def conversations_unarchive(options = {})
            throw ArgumentError.new('Required arguments :channel missing') if options[:channel].nil?
            options = options.merge(channel: channels_id(options)['channel']['id']) if options[:channel]
            post('conversations.unarchive', options)
          end
        end
      end
    end
  end
end
